{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useState,useContext}from'react';import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import TextInput from\"react-native-web/dist/exports/TextInput\";import Text from\"react-native-web/dist/exports/Text\";import ActivityIndicator from\"react-native-web/dist/exports/ActivityIndicator\";import{AuthContext}from\"../../context/AuthContext\";import{FormInput,SubmitButton,ErrorMessage}from\"../auth\";import LinkText from\"../LinkText\";var AuthForm=function AuthForm(_ref){var buttonText=_ref.buttonText,linkText=_ref.linkText,onSubmit=_ref.onSubmit,onTextPress=_ref.onTextPress;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),email=_useState2[0],setEmail=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),password=_useState4[0],setPassword=_useState4[1];var _useContext=useContext(AuthContext),authState=_useContext.authState,resetError=_useContext.actions.resetError;var onChangeEmail=function onChangeEmail(email){setEmail(email);resetError();};var onChangePassword=function onChangePassword(password){setPassword(password);resetError();};var resetForm=function resetForm(){setEmail('');setPassword('');resetError();onTextPress();};return React.createElement(View,{style:styles.container},React.createElement(FormInput,{title:\"Email\",value:email,onChangeText:onChangeEmail,placeholder:\"email@email.com\",isSecure:false}),React.createElement(FormInput,{title:\"Password\",value:password,onChangeText:onChangePassword,placeholder:\"(6 characters or more)\",isSecure:true}),React.createElement(SubmitButton,{email:email,password:password,buttonText:buttonText,onSubmit:onSubmit}),React.createElement(ErrorMessage,{message:authState.error}),React.createElement(LinkText,{text:linkText,onPress:function onPress(){return resetForm();},textSize:14,isLoading:false}));};var styles=StyleSheet.create({container:{flex:1,justifyContent:'center',paddingHorizontal:25,backgroundColor:'white',paddingTop:50},button:{alignSelf:'flex-end',width:150,height:100,borderWidth:1}});export default AuthForm;","map":{"version":3,"sources":["C:/Users/bosgi/Documents/Mobile Projects/cryptos/src/components/auth/AuthForm.js"],"names":["React","useState","useContext","AuthContext","FormInput","SubmitButton","ErrorMessage","LinkText","AuthForm","buttonText","linkText","onSubmit","onTextPress","email","setEmail","password","setPassword","authState","resetError","actions","onChangeEmail","onChangePassword","resetForm","styles","container","error","StyleSheet","create","flex","justifyContent","paddingHorizontal","backgroundColor","paddingTop","button","alignSelf","width","height","borderWidth"],"mappings":"iEAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,UAA1B,KAA4C,OAA5C,C,yTAEA,OAASC,WAAT,iCACA,OAASC,SAAT,CAAoBC,YAApB,CAAkCC,YAAlC,eACA,MAAOC,CAAAA,QAAP,mBAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAqD,IAAlDC,CAAAA,UAAkD,MAAlDA,UAAkD,CAAtCC,QAAsC,MAAtCA,QAAsC,CAA5BC,QAA4B,MAA5BA,QAA4B,CAAlBC,WAAkB,MAAlBA,WAAkB,eAC1CX,QAAQ,CAAC,EAAD,CADkC,wCAC7DY,KAD6D,eACtDC,QADsD,8BAEpCb,QAAQ,CAAC,EAAD,CAF4B,yCAE7Dc,QAF6D,eAEnDC,WAFmD,+BAGrBd,UAAU,CAACC,WAAD,CAHW,CAG5Dc,SAH4D,aAG5DA,SAH4D,CAGtCC,UAHsC,aAGjDC,OAHiD,CAGtCD,UAHsC,CAKpE,GAAME,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACP,KAAD,CAAW,CAC/BC,QAAQ,CAACD,KAAD,CAAR,CACAK,UAAU,GACX,CAHD,CAKA,GAAMG,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACN,QAAD,CAAc,CACrCC,WAAW,CAACD,QAAD,CAAX,CACAG,UAAU,GACX,CAHD,CAKA,GAAMI,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtBR,QAAQ,CAAC,EAAD,CAAR,CACAE,WAAW,CAAC,EAAD,CAAX,CACAE,UAAU,GACVN,WAAW,GACZ,CALD,CAOA,MACE,qBAAC,IAAD,EAAM,KAAK,CAAEW,MAAM,CAACC,SAApB,EAEE,oBAAC,SAAD,EACE,KAAK,CAAC,OADR,CAEE,KAAK,CAAEX,KAFT,CAGE,YAAY,CAAEO,aAHhB,CAIE,WAAW,CAAC,iBAJd,CAKE,QAAQ,CAAE,KALZ,EAFF,CAUE,oBAAC,SAAD,EACE,KAAK,CAAC,UADR,CAEE,KAAK,CAAEL,QAFT,CAGE,YAAY,CAAEM,gBAHhB,CAIE,WAAW,CAAC,wBAJd,CAKE,QAAQ,CAAE,IALZ,EAVF,CAkBE,oBAAC,YAAD,EACE,KAAK,CAAER,KADT,CAEE,QAAQ,CAAEE,QAFZ,CAGE,UAAU,CAAEN,UAHd,CAIE,QAAQ,CAAEE,QAJZ,EAlBF,CAyBE,oBAAC,YAAD,EAAc,OAAO,CAAEM,SAAS,CAACQ,KAAjC,EAzBF,CA2BE,oBAAC,QAAD,EACE,IAAI,CAAEf,QADR,CAEE,OAAO,CAAE,yBAAMY,CAAAA,SAAS,EAAf,EAFX,CAGE,QAAQ,CAAE,EAHZ,CAIE,SAAS,CAAE,KAJb,EA3BF,CADF,CAqCD,CA3DD,CA6DA,GAAMC,CAAAA,MAAM,CAAGG,UAAU,CAACC,MAAX,CAAkB,CAC/BH,SAAS,CAAE,CACTI,IAAI,CAAE,CADG,CAETC,cAAc,CAAE,QAFP,CAGTC,iBAAiB,CAAE,EAHV,CAITC,eAAe,CAAE,OAJR,CAKTC,UAAU,CAAE,EALH,CADoB,CAQ/BC,MAAM,CAAE,CACNC,SAAS,CAAE,UADL,CAENC,KAAK,CAAE,GAFD,CAGNC,MAAM,CAAE,GAHF,CAINC,WAAW,CAAE,CAJP,CARuB,CAAlB,CAAf,CAgBA,cAAe7B,CAAAA,QAAf","sourcesContent":["import React, { useState, useContext } from 'react';\r\nimport { View, StyleSheet, TextInput, Text, ActivityIndicator } from 'react-native';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { FormInput, SubmitButton, ErrorMessage } from '../auth';\r\nimport LinkText from '../LinkText';\r\n\r\nconst AuthForm = ({ buttonText, linkText, onSubmit, onTextPress }) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const { authState, actions: { resetError } } = useContext(AuthContext);\r\n\r\n  const onChangeEmail = (email) => {\r\n    setEmail(email);\r\n    resetError();\r\n  }\r\n\r\n  const onChangePassword = (password) => {\r\n    setPassword(password);\r\n    resetError();\r\n  }\r\n  \r\n  const resetForm = () => {\r\n    setEmail('');\r\n    setPassword('');\r\n    resetError();\r\n    onTextPress();\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n\r\n      <FormInput \r\n        title='Email'\r\n        value={email}\r\n        onChangeText={onChangeEmail}\r\n        placeholder='email@email.com'\r\n        isSecure={false}\r\n      />\r\n\r\n      <FormInput \r\n        title='Password'\r\n        value={password}\r\n        onChangeText={onChangePassword}\r\n        placeholder='(6 characters or more)'\r\n        isSecure={true}\r\n      />\r\n\r\n      <SubmitButton \r\n        email={email} \r\n        password={password} \r\n        buttonText={buttonText} \r\n        onSubmit={onSubmit}\r\n      />\r\n\r\n      <ErrorMessage message={authState.error} />\r\n\r\n      <LinkText \r\n        text={linkText}\r\n        onPress={() => resetForm()}\r\n        textSize={14}\r\n        isLoading={false}\r\n      />\r\n\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    paddingHorizontal: 25,\r\n    backgroundColor: 'white',\r\n    paddingTop: 50,\r\n  },\r\n  button: {\r\n    alignSelf: 'flex-end',\r\n    width: 150,\r\n    height: 100,\r\n    borderWidth: 1,\r\n  },\r\n})\r\n\r\nexport default AuthForm;"]},"metadata":{},"sourceType":"module"}